To install OpenCV with **CUDA (NVIDIA GPU) support**, using `pip` alone isn't enough ‚Äî the standard pip-installed `opencv-python` package does **not include CUDA support**.

Instead, you'll need to **build OpenCV from source** with CUDA enabled. Here's a full step-by-step guide to do that:

---

### ‚úÖ Prerequisites

1. **Linux** (Ubuntu recommended) or **WSL2** (for Windows)
2. **CUDA Toolkit** and **cuDNN** installed
3. **Python 3 + pip + virtualenv** (recommended)
4. **CMake**
5. **Build tools** (e.g., `make`, `ninja`, `gcc`, etc.)
6. **OpenCV source code**

---

### üîß Step-by-Step Instructions

#### 1. Install dependencies

```bash
sudo apt update
sudo apt install -y build-essential cmake git pkg-config \
  libjpeg-dev libtiff-dev libpng-dev \
  libavcodec-dev libavformat-dev libswscale-dev \
  libv4l-dev libxvidcore-dev libx264-dev \
  libgtk-3-dev libatlas-base-dev gfortran python3-dev python3-pip
```

#### 2. Install CUDA and cuDNN

Make sure `nvcc` and `nvidia-smi` work:

```bash
nvcc --version
nvidia-smi
```

#### 3. Clone OpenCV repositories

```bash
mkdir ~/opencv_build && cd ~/opencv_build
git clone https://github.com/opencv/opencv.git
git clone https://github.com/opencv/opencv_contrib.git
```

#### 4. Create a Python virtual environment (optional but recommended)

```bash
python3 -m venv venv
source venv/bin/activate
pip install numpy
```

#### 5. Configure with CMake (with CUDA)

```bash
cd ~/opencv_build
mkdir build && cd build

cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=$(python -c "import sys; print(sys.prefix)") \
      -D INSTALL_PYTHON_EXAMPLES=ON \
      -D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
      -D BUILD_EXAMPLES=ON \
      -D WITH_CUDA=ON \
      -D ENABLE_FAST_MATH=1 \
      -D CUDA_FAST_MATH=1 \
      -D WITH_CUBLAS=1 \
      -D OPENCV_DNN_CUDA=ON \
      -D BUILD_opencv_python3=ON \
      -D PYTHON3_EXECUTABLE=$(which python) \
      -D PYTHON3_INCLUDE_DIR=$(python -c "from sysconfig import get_paths; print(get_paths()['include'])") \
      -D PYTHON3_LIBRARY=$(python -c "import ctypes.util; print(ctypes.util.find_library('python3'))") \
      ../opencv
```

*If any paths fail above, you can manually override them.*

#### 6. Compile

Use all CPU cores (change `-j` depending on your system):

```bash
make -j$(nproc)
```

#### 7. Install

```bash
make install
```

#### 8. Test

```bash
python -c "import cv2; print(cv2.getBuildInformation())"
```

‚úÖ Look for `"CUDA: YES"` in the output.

---

### ‚ö†Ô∏è Notes

* This process takes **a long time** (\~30‚Äì90 mins depending on your system).
* You can use `ninja` instead of `make` by adding `-G Ninja` to the `cmake` command if you have `ninja` installed.
* If you install via pip (`pip install opencv-python`), it **won‚Äôt have CUDA support**.

---

Would you like a Dockerfile to do this instead (more reproducible)?
